{"version":3,"file":"static/js/288.55b2ede4.chunk.js","mappings":"8NAEaA,EAAY,mCAAG,WAAOC,GAAP,yFACPC,MAAM,sCAAD,OACgBD,EADhB,4BAHd,qCAEgB,cACpBE,EADoB,OAIpBC,EAAOD,EAAKE,OAJQ,kBAKnBD,GALmB,2CAAH,sD,oCCAZE,E,OAAWC,GAAAA,GAAH,wH,SCGRC,EAAW,WACtB,MCF+B,WAC/B,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,6GAEuBlB,EAAagB,GAFpC,UAEUZ,EAFV,OAGIO,EAASP,EAAKe,MACdJ,GAAa,GAEY,IAArBX,EAAKe,KAAKC,OANlB,sBAOY,IAAIC,MAPhB,yDAUIR,GAAS,GAVb,yBAYIE,GAAa,GAZjB,8EADc,uBAAC,WAAD,wBAgBdO,EACD,GAAE,CAACN,IAEG,CAAEN,MAAAA,EAAOE,MAAAA,EAAOE,UAAAA,EACxB,CDxBqCS,GAA5Bb,EAAR,EAAQA,MAAOE,EAAf,EAAeA,MAAOE,EAAtB,EAAsBA,UACtB,GAAgCL,EAAAA,EAAAA,WAAS,GAAzC,eAAOe,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,WACnBD,GAAY,EACb,EAGD,OACE,gCACGX,IAAa,SAACa,EAAA,EAAD,IACbf,IAAS,qEACTF,IACC,SAACJ,EAAD,UACGI,EAAMkB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAM5B,EAAkC,EAAlCA,GAAI6B,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACpC,OACE,2BACE,gBACEC,IACEF,EAAY,UAbb,oCAaa,OACMA,GADN,qEAIdG,IAAKJ,EACLK,MAAM,MACNC,OAAO,MACPC,OAAQV,EACRW,MAAO,CAAEC,QAASd,EAAW,QAAU,WAEvCA,IAAY,SAACG,EAAA,EAAD,KAEd,uBAAIE,KACJ,uBAAIE,MAhBG9B,EAmBZ,QAKV,C","sources":["services/castMoviesApi.js","pages/CastPage/CastPage.styled.js","pages/CastPage/CastPage.jsx","hooks/useFetchCastMovie.js"],"sourcesContent":["const KEY = '762b5545ec681e46f6d7d0ae5d3e3243';\n\nexport const getCastMovie = async (id) => {\n  const resp = await fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${KEY}`\n  );\n  const data = resp.json();\n  return data;\n};\n","import styled from 'styled-components';\n\nexport const ListItem = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  list-style: none;\n  text-align: center;\n`;\n","import { useFetchCastMovie } from 'hooks/useFetchCastMovie';\nimport { Loader } from 'components/Loader/Loader';\nimport { useState } from 'react';\nimport { ListItem } from './CastPage.styled';\n\nexport const CastPage = () => {\n  const { movie, error, isLoading } = useFetchCastMovie();\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const handleLoaded = () => {\n    setIsLoaded(true);\n  };\n  const startUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <h2>We don't have any actors for this movie.</h2>}\n      {movie && (\n        <ListItem>\n          {movie.map(({ name, id, profile_path, character }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={\n                    profile_path\n                      ? `${startUrl}${profile_path}`\n                      : `https://remontka.pro/images/change-or-delete-avatar-windows-10.png`\n                  }\n                  alt={name}\n                  width=\"200\"\n                  height=\"300\"\n                  onLoad={handleLoaded}\n                  style={{ display: isLoaded ? 'block' : 'none' }}\n                />\n                {!isLoaded && <Loader />}\n\n                <p>{name}</p>\n                <p>{character}</p>\n              </li>\n            );\n          })}\n        </ListItem>\n      )}\n    </>\n  );\n};\n","import { getCastMovie } from 'services/castMoviesApi';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\n\nexport const useFetchCastMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovie() {\n      try {\n        const data = await getCastMovie(movieId);\n        setMovie(data.cast);\n        setIsLoading(true);\n\n        if (data.cast.length === 0) {\n          throw new Error();\n        }\n      } catch {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovie();\n  }, [movieId]);\n\n  return { movie, error, isLoading };\n};\n"],"names":["getCastMovie","id","fetch","resp","data","json","ListItem","styled","CastPage","useState","movie","setMovie","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","cast","length","Error","getMovie","useFetchCastMovie","isLoaded","setIsLoaded","handleLoaded","Loader","map","name","profile_path","character","src","alt","width","height","onLoad","style","display"],"sourceRoot":""}